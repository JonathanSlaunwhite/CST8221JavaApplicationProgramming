
/*
File name: 			ServerChatUI
Author:				Jonathan Slaunwhite
Course &section: 	CST8221 , 303
Assignment: 		2 part 1
Date:			    2020-03-02
Professor: 			Daniel Cormier
Purpose: 			Purpose of this class is the generate JLabel to be added to
					JFrame and to handle events generated by the GUI.

*/

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.net.Socket;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;


/**
 *  Purpose of this class is the generate JLabel to be added to
 *  JFrame and to handle events generated by the GUI.
 * @author Jonathan Slaunwhite
 * @version 1.0
 * @see ServerChatUI.java
 * @since 1.8
 */
public class ServerChatUI extends JFrame {

	/**This is the socket variable holding the socket*/
	Socket socket;

/**
 * Purpose of this method is to get socket and set frame and run the client
 * @param socket
 */
	public ServerChatUI(Socket socket) {

		this.socket = socket;// set local socket to socket from constructor

		setframe(CreateUI());// set frame
		runCient();// run frame

	}

	/**
	 * Purpose of this method is to set the frame for the server chat UI
	 * 
	 * @param jpanel japnel to add to content pane
	 */
	public final void setframe(JPanel jpanel) {

		setContentPane(jpanel);// set contentpane with jpanel

		setSize(588, 500);// set size to what is requested

		setResizable(false);// cant edit size

		addWindowListener(new WindowController());
	}

	/**
	 * Purpose of this method is to create GUI all in one JPanel
	 * @return JPanel which holds all GUI in the container
	 */
	public JPanel CreateUI() {

		
		Controller controller= new Controller();
		
		JPanel main = new JPanel();// main panel for program
		main.setLayout(new BorderLayout());

		JPanel upperNorth = new JPanel();// to hold red boarder box
		upperNorth.setLayout(new BorderLayout());
		TitledBorder lowernorthboarder = BorderFactory
				.createTitledBorder(BorderFactory.createLineBorder(Color.blue, 10), "MESSAGE");// blue boarder with 10
																								// pix
		// lowernorthboarder.setTitleJustification(TitledBorder.CENTER);
		upperNorth.setBorder(lowernorthboarder);// set its boarder

		JButton send = new JButton("Send");
		send.setMnemonic(KeyEvent.VK_S);// alt s for send button
		send.setPreferredSize(new Dimension(120, 25));
		send.setEnabled(true);// must be enabled at launch
		
		
		send.addActionListener(controller);//add a handler of type controller to the send button
		

		JTextField message = new JTextField("Type a message");
		message.requestFocusInWindow();// focus when application runs
		message.setCaretPosition(0);// set its position blinker to first left area
		upperNorth.add(message, BorderLayout.CENTER);

		upperNorth.add(send, BorderLayout.EAST);

		JTextArea p = new JTextArea(30, 45);// j text area with 30 rows and 45 columns

		p.setEditable(false);

		JScrollPane scroll = new JScrollPane(p);// scroll pane
		// middle.add(scroll,BorderLayout.CENTER);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);// make scrollbar always visible

		TitledBorder chatBoarder = BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black, 10),
				"CHAT DISPLAY");// boarder black 10 pix
		chatBoarder.setTitleJustification(TitledBorder.CENTER);
		scroll.setBorder(chatBoarder);

		main.add(upperNorth, BorderLayout.NORTH);// add the upper north panel to main program in north section
		main.add(scroll, BorderLayout.CENTER);// add scroll bar and jtext area to center of program

		return main;// return jlabel
	}

	/**
	 * Purpose of this method is to run the client
	 */
	private void runCient() {//empty body 

	}

	/**
	 * Purpose of this class is to window controller the windowAdaper and system.exit the program
	 * 
	 * @author Jonathan Slaunwhite
	 * @version 1.0
	 * @see WindowController.java
	 * @since 1.8
	 */
	private class WindowController extends WindowAdapter {

		public void windowClosing() {

			System.exit(0);// system.exit

		}
	}

	/**
	 * Purpose of this class is to handle all action events within this class
	 * 
	 * @author Jonathan Slaunwhite
	 * @version 1.0
	 * @see Controller.java
	 * @since 1.8
	 */
	private class Controller implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// empty body

		}
	}

}
