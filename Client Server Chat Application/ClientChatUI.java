
/*
File name: 			ClientChatUI
Author:				Jonathan Slaunwhite
Course &section: 	CST8221 , 303
Assignment: 		2 part 1
Date:			    2020-03-02
Professor: 			Daniel Cormier
Purpose: 			Purpose of this class is the generate JLabel to be added to
					JFrame and to handle events generated by the GUI.

*/

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.io.ObjectOutputStream;
import java.net.Socket;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;


/**
 * Purpose of this class is the generate JLabel to be added to
 *JFrame and to handle events generated by the GUI.
 * 
 * @author Jonathan Slaunwhite
 * @version 1.0
 * @see ClientChatUI.java
 * @since 1.8
 */
public class ClientChatUI extends JFrame implements Accessible {

	//impliment this
	JTextField message;
	JButton sendButton;
	JTextArea display;
	ObjectOutputStream outputStream;
	Socket socket;
	ConnectionWrapper connection;
	
	
	
	
	
	
	@Override
	public JTextArea getDisplay() {
	
		
		return null;
	}
	
	
	@Override
	public void closeChat() {
		// if the socket is not closed, tries to close the connection
		// then calls enableConnectButton()
		try {
			connection.closeConnection();
		//	enableConnectButton();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	
	
	/**
	 * Purpose of this method is to set title and run the client program
	 * 
	 * @param frameTitle set title name
	 */
	ClientChatUI(String frameTitle) {// set title and run client method

		setTitle(frameTitle);// set frame title
		runClient();// run client method
	}

	/**
	 * Purpose of this method is to Set the content pane from the create clientUI method and add a window lisener
	 */
	private void runClient() {
		setContentPane(createClientUI());// calls createUI
		addWindowListener(new WindowController());// ad window contrlller listner to frame using object window
													// controller
	}
	
	/**
	 * Purpose of this method is to create GUI apperance on a jlabel 
	 * 
	 * @return JPanel main panel contaning everything from GUI creation
	 */
	public JPanel createClientUI() {// create GUI for clientchat

		JPanel main = new JPanel();// main panel for program
		main.setLayout(new BorderLayout());

		JPanel north = new JPanel();// north panel containing north section
		north.setLayout(new BorderLayout());

		JPanel north1 = new JPanel();
		north1.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0)); // 5 pixels removed from left margin of text
																		// field
		JPanel north2 = new JPanel();
		north2.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0)); // 5 pixels removed from left margin of text
																		// field
		north1.setLayout(new FlowLayout(FlowLayout.LEFT));
		north2.setLayout(new FlowLayout(FlowLayout.LEFT));

		JLabel host = new JLabel("Host:");
		host.setDisplayedMnemonic(KeyEvent.VK_H);// alt h for host text
		host.setPreferredSize(new Dimension(35, 30));

		JTextField hostText = new JTextField("localhost");

		hostText.requestFocusInWindow();// focus when application runs
		hostText.setCaretPosition(0);// set its position blinker to first left area

		hostText.setPreferredSize(new Dimension(500, 20));

		host.setLabelFor(hostText);// when jlabel pressed cuser goes to text field

		north1.add(host);
		north1.add(hostText);

		north.add(north1, BorderLayout.NORTH);

		JLabel port = new JLabel("Port:");

		port.setDisplayedMnemonic(KeyEvent.VK_P);// alt P for port

		port.setPreferredSize(new Dimension(35, 30));

		JButton connect = new JButton("Connect");
		connect.setMnemonic(KeyEvent.VK_C);// alt c for connect button
		connect.setPreferredSize(new Dimension(110, 25));
		connect.setBackground(Color.RED);

		JComboBox portNumber = new JComboBox();
		portNumber.setBackground(Color.white);
		portNumber.setPreferredSize(new Dimension(110, 25));
		portNumber.addItem("");
		portNumber.addItem(8088);// add items to jcombo box
		portNumber.addItem(65001);
		portNumber.addItem(65525);

		port.setLabelFor(portNumber);// when jlabel pressed cuser goes to text field

		north2.add(port);
		north2.add(portNumber);
		north2.add(connect);

		TitledBorder connectionboarder = BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.red, 10),
				"CONNECTION");
		connectionboarder.setTitleJustification(TitledBorder.CENTER);// boarder with red color and 10 pix
		north.setBorder(connectionboarder);

		north.add(north2, BorderLayout.CENTER);

		JPanel lowernorth = new JPanel();
		lowernorth.setLayout(new BorderLayout());
		TitledBorder lowernorthboarder = BorderFactory
				.createTitledBorder(BorderFactory.createLineBorder(Color.blue, 10), "MESSAGE");// boarder with blue
																								// color 10 pix and
																								// title
		// lowernorthboarder.setTitleJustification(TitledBorder.CENTER);
		lowernorth.setBorder(lowernorthboarder);

		JButton send = new JButton("Send");
		send.setPreferredSize(new Dimension(90, 25));
		send.setEnabled(false);// must be disabled at launch

		send.setMnemonic(KeyEvent.VK_S);// alt S for send button

		lowernorth.add(send, BorderLayout.EAST);

		JTextField message = new JTextField("Type a message");

		lowernorth.add(message, BorderLayout.CENTER);

		// north.add(lowernorth,BorderLayout.SOUTH);

		JPanel middle = new JPanel();
		middle.setLayout(new BorderLayout());

		middle.add(lowernorth, BorderLayout.NORTH);

		JTextArea p = new JTextArea(30, 45);// j text area with 30 rows and 45 columns

		p.setEditable(false);

		JScrollPane scroll = new JScrollPane(p);
		middle.add(scroll, BorderLayout.CENTER);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

		TitledBorder chatBoarder = BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black, 10),
				"CHAT DISPLAY");
		chatBoarder.setTitleJustification(TitledBorder.CENTER);
		scroll.setBorder(chatBoarder);

		main.add(north, BorderLayout.NORTH);//add north panel for main panel to be returned
		main.add(middle, BorderLayout.CENTER);//add middle panel to main panel to be returned 
		return main;
	}

	/**
	 * Purpose of this class is to window controller the windowAdaper and system.exit the program
	 * 
	 * @author Jonathan Slaunwhite
	 * @version 1.0
	 * @see WindowController.java
	 * @since 1.8
	 */
	private class WindowController extends WindowAdapter {

		/**
		 * Purpose of this method is to call system.exit
		 */
		public void windowClosing() {

			System.exit(0);// system.exit

		}
	}

	/**
	 * Purpose of this class is to handle all action events within this class
	 * 
	 * @author Jonathan Slaunwhite
	 * @version 1.0
	 * @see Controller.java
	 * @since 1.8
	 */
	private class Controller implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// empty body

		}

	}

}
